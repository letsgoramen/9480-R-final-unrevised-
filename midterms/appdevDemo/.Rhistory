library(testthat)
library(usethis)
library(devtools)
library(here)
use_testthat()
use_test()
load_all()
test_that("addition works", {
expect_equal(addition(1,3),4)
expect_equal(addition(1,1),2)
expect_equal(addition(1,2),3)
})
test_that("gives error when numbers are passed as string", {
expect_error(add_numbers("2",1))
expect_error(add_numbers(1,"2"))
})
devtools::test()
use_test()
test_that("Increment works", {
expect_equal(inc(2), 3)
expect_equal(inc(3), 4)
expect_equal(inc(5), 6)
})
---
title: "Documentation"
---
title: "Documentation"
# R setup for test-driven development and package configuration.
library(testthat) # package for creating unit tests
library(usethis) #provides shortcuts for setting up tests
library(devtools)#provides functions to work with packages easier
library(here) #helps to create a portable project
use_testthat()
use_test()
# R setup for test-driven development and package configuration.
#install.packages("")  -> to install packages needed
library(testthat) # package for creating unit tests
library(usethis) #provides shortcuts for setting up tests
library(devtools)#provides functions to work with packages easier
library(here) #helps to create a portable project
use_testthat()
use_test()
test_that("addition works", {
expect_equal(addition(1,3),4)
expect_equal(addition(1,1),2)
expect_equal(addition(1,2),3)
})
test_that("gives error when numbers are passed as string", {
expect_error(add_numbers("2",1))
expect_error(add_numbers(1,"2"))
})
loadall()
load_all()
devtools::test()
a <- 10
print(a)
a <- 10
#TRANSLATORS/ INTERPRETERS
# Assignment of value to variable a
a <- 10
# Condition to determine whether the value of a is equal to 10
# or not
if (a == 10) {
print("Variable a is equal to 10")
} else {
print("Variable a is not equal to 10")
}
a <- 10
if (a == 10) {
print("Variable a is equal to 10")
} else {
print("Variable a is not equal to 10")
}
test_that("addition works", {
expect_equal(addition(1,3),4)
expect_equal(addition(1,1),2)
expect_equal(addition(1,2),3)
})
test_that("gives error when numbers are passed as string", {
expect_error(addition("2",1))
expect_error(addition(1,"2"))
})
test_that("addition works", {
expect_equal(addition(1,3),4)
expect_equal(addition(1,1),2)
expect_equal(addition(1,2),3)
})
test_that("gives error when numbers are passed as string", {
expect_error(add_numbers("2",1))
expect_error(add_numbers(1,"2"))
})
source("C:/Users/melod/Downloads/appdevDemo/R/Profiling.R")
# R setup for test-driven development and package configuration.
#install.packages("")  -> to install packages needed
#library()->Load installed packages
library(testthat) # package for creating unit tests
library(usethis) #provides shortcuts for setting up tests
library(devtools)#provides functions to work with packages easier
library(here) #helps to create a portable project
use_testthat()
use_test()
use_test()
myfunc(10)
myfunc(-1)
traceback()
debug(myfunc)
myfunc(10)
debug(myfunc(-1))
n
myfunc(10)
debug(myfunc)
myfunc(-1)
2
a <- 10
print(a)
#TRANSLATORS/ INTERPRETERS
# Assignment of value to variable a
a <- 10
# Condition to determine whether the value of a is equal to 10
# or not
if (a == 10) {
print("Variable a is equal to 10")
} else {
print("Variable a is not equal to 10")
}
a <- 10
if (a == 10) {
print("Variable a is equal to 10")
} else {
print("Variable a is not equal to 10")
}
source("C:/Users/melod/Downloads/appdevDemo/R/Profiling.R")
source("C:/Users/melod/Downloads/appdevDemo/R/Profiling.R")
source("C:/Users/melod/Downloads/appdevDemo/R/Profiling.R")
# R setup for test-driven development and package configuration.
#install.packages("")  -> to install packages needed
#library()->Load installed packages
library(testthat) # package for creating unit tests
library(usethis) #provides shortcuts for setting up tests
library(devtools)#provides functions to work with packages easier
library(here) #helps to create a portable project
use_testthat()
use_test()
devtools::test()
rm(list = c("addition_multiplication", "main_function", "subtraction_division"))
devtools::test()
test_that("addition works", {
expect_equal(addition(1,3),4)
expect_equal(addition(1,1),2)
expect_equal(addition(1,2),3)
})
test_that("gives error when numbers are passed as string", {
expect_error(addition("2",1))
expect_error(addition(1,"2"))
})
devtools::test()
load_all()
devtools::test()
devtools::test(test-Testing.R)
devtools::test(addition(1,3))
test_that("addition works", {
expect_equal(addition(1,3),4)
expect_equal(addition(1,1),2)
expect_equal(addition(1,2),3)
})
test_that("gives error when numbers are passed as string", {
expect_error(addition("2",1))
expect_error(addition(1,"2"))
})
devtools::test(file=test-Testing)
devtools::test_active_file(file = find_active_file())
devtools::test_active_file(file = test-Testing())
devtools::test_active_file(file = findFunction(addition))
devtools::test_file(test-Testing)
load_all(C:\Users\melod\Downloads\appdevDemo\tests\)
test_active_file()
test_that("addition works", {
expect_equal(addition(1,3),4)
expect_equal(addition(1,1),2)
expect_equal(addition(1,2),3)
})
test_that("gives error when numbers are passed as string", {
expect_error(addition("2",1))
expect_error(addition(1,"2"))
})
test_that("addition works", {
expect_equal(addition(1,3),4)
expect_equal(addition(1,1),2)
expect_equal(addition(1,2),3)
})
test_that("gives error when numbers are passed as string", {
expect_error(addition("2",1))
expect_error(addition(1,"2"))
})
test_active_file()
test_that("addition works", {
expect_equal(addition(1,3),4)
expect_equal(addition(1,1),2)
expect_equal(addition(1,2),3)
})
test_that("gives error when numbers are passed as string", {
expect_error(addition("2",1))
expect_error(addition(1,"2"))
})
devtools::test()
result <- result * 2
return(result)
#PROFILING
# Load the 'utils' package
library(utils)
# Function 1: Double the sum of a and b
addition_multiplication <- function(a, b) {
result <- a + b
result <- result * 2
return(result)
}
# Function 2: Divide the difference of a and b
subtraction_division <- function(a, b) {
result <- a - b
result <- result / 2
return(result)
}
# Function 3: Main function to profile
main_function <- function(n) {
total_result <- 0
for (i in 1:n) {
function1_result <- addition_multiplication(i, i + 1)
function2_result <- subtraction_division(i, i + 1)
total_result <- total_result + (function1_result + function2_result)
}
return(total_result)
}
# Start profiling
data = "profile_data.prof"  # output file  containing the data being processed
Rprof(data)
# Execution of main_function
n <- 100000
result <- main_function(n)
# Stop profiling
Rprof()
# Analyze the profile data
summary_data <- summaryRprof(data) # summarizes the retrieved data
print(summary_data)
#profiling-efficient way of showing which functions takes the most time to execute and needs
#self-time()
devtools::test_active_file()
